<#@ import namespace="System" #>
<#	#pragma warning disable 0162 #>
<#	
	Type[] systemTypes = new Type[] { typeof(Byte), typeof(SByte), typeof(UInt16), typeof(Int16), typeof(UInt32), typeof(Int32), typeof(UInt64), typeof(Int64), typeof(Single), typeof(Double), typeof(Boolean), typeof(Char), typeof(String), typeof(DateTime), typeof(TimeSpan) };
	Type[] specialOperatorsTypes = new Type[] { typeof(Byte), typeof(SByte), typeof(UInt16), typeof(Int16), typeof(UInt32), typeof(Int32), typeof(UInt64), typeof(Int64), typeof(Single), typeof(Double), typeof(Boolean), typeof(Char), typeof(String) };

	string[] arithmeticOperators = new string[] { "+", "-", "*", "/", "%" };
	string[] arithmeticOperatorsFull = new string[] { "Addition", "Subtraction", "Multiply", "Division", "Modulus" };	
	string[] unaryOperators = new string[] { "+", "-", "++", "--" };
	string[] unaryOperatorsFull = new string[] { "UnaryPlus", "UnaryNegation", "Increment", "Decrement" };
	string[] equalityOperators = new string[] { "==", "!=" };
	string[] equalityOperatorsFull = new string[] { "Equality", "Equality" };
	string[] comparisonOperators = new string[] { ">", ">=", "<", "<=" };
	string[] comparisonOperatorsFull = new string[] { "GreaterThan", "GreaterThanOrEqual", "LessThan", "LessThanOrEqual" };

	string[] bitwiseUnaryOperators = new string[] { "~" };
	string[] bitwiseUnaryOperatorsFull = new string[] { "OnesComplement" };
	string[] bitwiseOperators = new string[] { "&", "|", "^" };
	string[] bitwiseOperatorsFull = new string[] { "BitwiseAnd", "BitwiseOr", "ExclusiveOr" };
	string[] bitwiseShiftOperators = new string[] { "<<", ">>" };
	string[] bitwiseShiftOperatorsFull = new string[] { "LeftShift", "RightShift" };

	string[] logicalCheckOperators = new string[] { "true", "false" };
	string[] logicalCheckOperatorsFull = new string[] { "True", "False" };

	string[] logicalUnaryOperators = new string[] { "!" };
	string[] logicalUnaryOperatorsFull = new string[] { "LogicalNot" };

	string[] logicalOperators = new string[] { "&", "|" };
	string[] logicalOperatorsFull = new string[] { "LogicalAnd", "LogicalOr" };

	//other

	string[] conversionOperators = new string[] { "implicit", "explicit" };
	string[] conversionOperatorsFull = new string[] { "Implicit", "Explicit" };

	//special
	string[] specialUnaryOperators = new string[] { "&", "*", ".", "", "," }; //?
	string[] specialUnaryOperatorsFull = new string[] { "AddressOf", "PointerDereference", "MemberSelection", "PointerToMemberSelection", "Comma" };

	string[] specialAssignOperators = new string[] { "=" };
	string[] specialAssignOperatorsFull = new string[] { "Assign" };

	//assignment

	string[] arithmeticAssignmentOperators = new string[] { "+=", "-=", "*=", "/=" };
	string[] arithmeticAssignmentOperatorsFull = new string[] { "AdditionAssignment", "SubtractionAssignment", "MultiplicationAssignment", "DivisionAssignment" };	

	string[] bitwiseAssignmentOperators = new string[] { "&=", "|=", "^=" };
	string[] bitwiseAssignmentOperatorsFull = new string[] { "BitwiseAndAssignment", "BitwiseOrAssignment", "ExclusiveOrAssignment" };
	string[] bitwiseShiftAssignmentOperators = new string[] { "<<=", ">>=" };
	string[] bitwiseShiftAssignmentOperatorsFull = new string[] { "LeftShiftAssignment", "RightShiftAssignment" };

	string[] otherArithmeticAssignmentOperators = new string[] { "%=" };
	string[] otherArithmeticAssignmentOperatorsFull = new string[] { "ModulusAssignment" };
#>
