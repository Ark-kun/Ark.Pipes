<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Types.t4" #>
<#	#pragma warning disable 0162 #>
<#+
	class OperatorInfo {
		public string Group { get; set; }
		public string Name { get; set; }
		public string Symbol { get; set; }		
		public Type FixedReturnType { get; set; }

		public OperatorInfo(string group, string name, string symbol) {
			Group = group;
			Name = name;
			Symbol = symbol;
		}
	}

	class UnaryOperatorInfo : OperatorInfo {
		public Type FixedOperandType { get; set; }

		public UnaryOperatorInfo(string group, string name, string symbol)
			: base(group, name, symbol) {
		}
    }

	class BinaryOperatorInfo : OperatorInfo {
		public Type FixedOperand1Type { get; set; }
		public Type FixedOperand2Type { get; set; }
		public bool IsCommutative { get; set; }

		public BinaryOperatorInfo(string group, string name, string symbol, bool isCommutative = false)
			: base(group, name, symbol) {
			IsCommutative = isCommutative;
		}
    }

	static BinaryOperatorInfo opAddition    = new BinaryOperatorInfo("Arithmetic", "Addition",    "+", true);
	static BinaryOperatorInfo opSubtraction = new BinaryOperatorInfo("Arithmetic", "Subtraction", "-");
	static BinaryOperatorInfo opMultiply    = new BinaryOperatorInfo("Arithmetic", "Multiply",    "*", true);
	static BinaryOperatorInfo opDivision    = new BinaryOperatorInfo("Arithmetic", "Division",    "/");
	static BinaryOperatorInfo opExponent    = new BinaryOperatorInfo("Arithmetic", "Exponent",    "^");
	static BinaryOperatorInfo opModulus     = new BinaryOperatorInfo("Arithmetic", "Modulus",     "%");
	static BinaryOperatorInfo[] arithmeticOperators = new BinaryOperatorInfo[] { opAddition, opSubtraction, opMultiply, opDivision, opModulus };
	
	static UnaryOperatorInfo opUnaryPlus     = new UnaryOperatorInfo("Unary", "UnaryPlus",     "+");
	static UnaryOperatorInfo opUnaryNegation = new UnaryOperatorInfo("Unary", "UnaryNegation", "-");
	static UnaryOperatorInfo opIncrement     = new UnaryOperatorInfo("Unary", "Increment",     "++");
	static UnaryOperatorInfo opDecrement     = new UnaryOperatorInfo("Unary", "Decrement",     "--");
	static UnaryOperatorInfo[] unaryOperators = new UnaryOperatorInfo[] { opUnaryPlus, opUnaryNegation, opIncrement, opDecrement };
	
	static BinaryOperatorInfo opEquality   = new BinaryOperatorInfo("Relational", "Equality",   "==") { FixedReturnType = typeof(bool) };
	static BinaryOperatorInfo opInequality = new BinaryOperatorInfo("Relational", "Inequality", "!=") { FixedReturnType = typeof(bool) };
	static BinaryOperatorInfo[] equalityOperators = new BinaryOperatorInfo[] { opEquality, opInequality };
	
	static BinaryOperatorInfo opGreaterThan        = new BinaryOperatorInfo("Relational", "GreaterThan",        ">" ) { FixedReturnType = typeof(bool) };
	static BinaryOperatorInfo opGreaterThanOrEqual = new BinaryOperatorInfo("Relational", "GreaterThanOrEqual", ">=") { FixedReturnType = typeof(bool) };
	static BinaryOperatorInfo opLessThan           = new BinaryOperatorInfo("Relational", "LessThan",           "<" ) { FixedReturnType = typeof(bool) };
	static BinaryOperatorInfo opLessThanOrEqual    = new BinaryOperatorInfo("Relational", "LessThanOrEqual",    "<=") { FixedReturnType = typeof(bool) };
	static BinaryOperatorInfo[] comparisonOperators = new BinaryOperatorInfo[] { opGreaterThan, opGreaterThanOrEqual, opLessThan, opLessThanOrEqual };
	
	static UnaryOperatorInfo opOnesComplement = new UnaryOperatorInfo("Bitwise", "OnesComplement", "~");
	static UnaryOperatorInfo[] bitwiseUnaryOperators = new UnaryOperatorInfo[] { opOnesComplement };
	
	static BinaryOperatorInfo opBitwiseAnd  = new BinaryOperatorInfo("Bitwise", "BitwiseAnd",  "&");
	static BinaryOperatorInfo opBitwiseOr   = new BinaryOperatorInfo("Bitwise", "BitwiseOr",   "|");
	static BinaryOperatorInfo opExclusiveOr = new BinaryOperatorInfo("Bitwise", "ExclusiveOr", "^");
	static BinaryOperatorInfo[] bitwiseOperators = new BinaryOperatorInfo[] { opBitwiseAnd, opBitwiseOr, opExclusiveOr };
	
	static BinaryOperatorInfo opLeftShift  = new BinaryOperatorInfo("Bitwise", "LeftShift",  "<<") { FixedOperand2Type = typeof(int) };
	static BinaryOperatorInfo opRightShift = new BinaryOperatorInfo("Bitwise", "RightShift", ">>") { FixedOperand2Type = typeof(int) };
	static BinaryOperatorInfo[] bitwiseShiftOperators = new BinaryOperatorInfo[] { opLeftShift, opRightShift };
	
	static UnaryOperatorInfo opTrue  = new UnaryOperatorInfo("Logical", "True",  "true") { FixedReturnType = typeof(bool) };
	static UnaryOperatorInfo opFalse = new UnaryOperatorInfo("Logical", "False", "false") { FixedReturnType = typeof(bool) };
	static UnaryOperatorInfo[] logicalCheckOperators = new UnaryOperatorInfo[] { opTrue, opFalse };
	
	static UnaryOperatorInfo opLogicalNot = new UnaryOperatorInfo("Logical", "LogicalNot", "!");
	static UnaryOperatorInfo[] logicalUnaryOperators = new UnaryOperatorInfo[] { opLogicalNot };
	
	static BinaryOperatorInfo opLogicalAnd = new BinaryOperatorInfo("Logical", "LogicalAnd", "&");
	static BinaryOperatorInfo opLogicalOr = new BinaryOperatorInfo("Logical", "LogicalOr",   "|");
	static BinaryOperatorInfo[] logicalOperators = new BinaryOperatorInfo[] { opLogicalAnd, opLogicalOr };
	
	//other
	static UnaryOperatorInfo opImplicit = new UnaryOperatorInfo("Conversion", "Implicit",   "implicit");
	static UnaryOperatorInfo opExplicit = new UnaryOperatorInfo("Conversion", "Explicit",   "explicit");
	static UnaryOperatorInfo[] conversionOperators = new UnaryOperatorInfo[] { opImplicit, opExplicit };

	//special
	static Dictionary<string, string> specialUnaryOperators = new Dictionary<string, string> {
		{ "AddressOf",                "&"   },
		{ "PointerDereference",       "*"   },
		{ "MemberSelection",          "->"  },
		{ "PointerToMemberSelection", "->*" },
		{ "Comma"                   , ","   }
	};

	static Dictionary<string, string> specialAssignOperators = new Dictionary<string, string> {
		{ "Assign", "=" }
    };

	//assignment
	static Dictionary<string, string> arithmeticAssignmentOperators = new Dictionary<string, string> {
		{ "AdditionAssignment",       "+=" },
		{ "SubtractionAssignment",    "-=" },
		{ "MultiplicationAssignment", "*=" },
		{ "DivisionAssignment",       "/=" },
		{ "ModulusAssignment",        "%=" }
	};
	static Dictionary<string, string> bitwiseAssignmentOperators = new Dictionary<string, string> {
		{ "BitwiseAndAssignment",  "&=" },
		{ "BitwiseOrAssignment",   "|=" },
		{ "ExclusiveOrAssignment", "^=" }
    };
	static Dictionary<string, string> bitwiseShiftAssignmentOperators = new Dictionary<string, string> {
		{ "LeftShiftAssignment",  "<<=" },
		{ "RightShiftAssignment", ">>=" }
	};
#>
