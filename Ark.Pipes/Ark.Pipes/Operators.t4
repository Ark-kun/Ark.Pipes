<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#	#pragma warning disable 0162 #>
<#
	Type[] systemTypes = new Type[] { typeof(Byte), typeof(SByte), typeof(UInt16), typeof(Int16), typeof(UInt32), typeof(Int32), typeof(UInt64), typeof(Int64), typeof(Single), typeof(Double), typeof(Boolean), typeof(Char), typeof(String), typeof(DateTime), typeof(TimeSpan) };
	Type[] specialOperatorsTypes = new Type[] { typeof(Byte), typeof(SByte), typeof(UInt16), typeof(Int16), typeof(UInt32), typeof(Int32), typeof(UInt64), typeof(Int64), typeof(Single), typeof(Double), typeof(Boolean), typeof(Char), typeof(String) };

	Dictionary<string, string> arithmeticOperators = new Dictionary<string, string> {
		{ "Addition",    "+" },
		{ "Subtraction", "-" },
		{ "Multiply",    "*" },
		{ "Division",    "/" },
		//{ "Exponent",    "^" },
		{ "Modulus",     "%" }		
	};
	Dictionary<string, string> unaryOperators = new Dictionary<string, string> {
		{ "UnaryPlus",     "+"  },
		{ "UnaryNegation", "-"  },
		{ "Increment",     "++" },
		{ "Decrement",     "--" }
	};
	Dictionary<string, string> equalityOperators = new Dictionary<string, string> {
		{ "Equality",   "==" },
		{ "Inequality", "!=" }
    };
	Dictionary<string, string> comparisonOperators = new Dictionary<string, string> {
		{ "GreaterThan",        ">"  },
		{ "GreaterThanOrEqual", ">=" },
		{ "LessThan",           "<"  },
		{ "LessThanOrEqual",    "<=" }
	};


	Dictionary<string, string> bitwiseUnaryOperators = new Dictionary<string, string> {
		{ "OnesComplement", "~" }
    };
	Dictionary<string, string> bitwiseOperators = new Dictionary<string, string> {
		{ "BitwiseAnd",  "&" },
		{ "BitwiseOr",   "|" },
		{ "ExclusiveOr", "^" }
	};
	Dictionary<string, string> bitwiseShiftOperators = new Dictionary<string, string> {
		{ "LeftShift",  "<<" },
		{ "RightShift", ">>" }
	};

	Dictionary<string, string> logicalCheckOperators = new Dictionary<string, string> {
		{ "True",  "true"  },
		{ "False", "false" }
	};

	Dictionary<string, string> logicalUnaryOperators = new Dictionary<string, string> {
		{ "LogicalNot", "!" }
    };

	Dictionary<string, string> logicalOperators = new Dictionary<string, string> {
		{ "LogicalAnd", "&" },
		{ "LogicalOr",  "|" }
	};

	//other

	Dictionary<string, string> conversionOperators = new Dictionary<string, string> {
		{ "Implicit", "implicit" },
		{ "Explicit", "explicit" }
	};

	//special
	Dictionary<string, string> specialUnaryOperators = new Dictionary<string, string> {
		{ "AddressOf",                "&"   },
		{ "PointerDereference",       "*"   },
		{ "MemberSelection",          "->"  },
		{ "PointerToMemberSelection", "->*" },
		{ "Comma"                   , ","   }
	};

	Dictionary<string, string> specialAssignOperators = new Dictionary<string, string> {
		{ "Assign", "=" }
    };

	//assignment
	Dictionary<string, string> arithmeticAssignmentOperators = new Dictionary<string, string> {
		{ "AdditionAssignment",       "+=" },
		{ "SubtractionAssignment",    "-=" },
		{ "MultiplicationAssignment", "*=" },
		{ "DivisionAssignment",       "/=" },
		{ "ModulusAssignment",        "%=" }
	};
	Dictionary<string, string> bitwiseAssignmentOperators = new Dictionary<string, string> {
		{ "BitwiseAndAssignment",  "&=" },
		{ "BitwiseOrAssignment",   "|=" },
		{ "ExclusiveOrAssignment", "^=" }
    };
	Dictionary<string, string> bitwiseShiftAssignmentOperators = new Dictionary<string, string> {
		{ "LeftShiftAssignment",  "<<=" },
		{ "RightShiftAssignment", ">>=" }
	};

	//class OperatorName {
	//	  string _fullName;
	//	  string _symbol;
	//
	//    public OperatorName(string fullName , string symbol) {
	//        _fullName = fullName;
	//        _symbol = symbol;
	//    }
	//
	//    public String FullName { get {return _fullName; } }
	//    public Symbol { get {return _symbol; } }
	//}
#>
