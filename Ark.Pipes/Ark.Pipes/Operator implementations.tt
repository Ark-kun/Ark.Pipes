<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="System types.t4" #>
<#@ include file="Operator implementations.t4" #>
<#	#pragma warning disable 0162 #>
<#
	Type[] types = new Type[] {typeof(Int32), typeof(Single), typeof(Double)};
	List<string> generatedClasses = new List<string>();
#>
using System;
using Ark.Pipes.Operators;

namespace Ark.Pipes.Generated {
	<#
	var operatorsForType = GetPrimitiveTypeOperatorSets();
	foreach(var type in primitiveTypes) {
		foreach(var op in operatorsForType[type]) {
			var unary = op as UnaryOperatorInfo;
			if(unary != null) {
				generatedClasses.AddRange(GenerateOperatorImplementation(op.Group, op.Name, op.Symbol, (unary.FixedOperandType ?? type), (op.FixedReturnType ?? type)));
			}
			var binary = op as BinaryOperatorInfo;
			if(binary != null) {
				generatedClasses.AddRange(GenerateOperatorImplementation(op.Group, op.Name, op.Symbol, (binary.FixedOperand1Type ?? type), (binary.FixedOperand2Type ?? type), (op.FixedReturnType ?? type)));
			}				
		}
	}
	#>

	static class OperatorRegistrator {
		public static void RegisterHandlers() {
			RegisterHandlers(Provider.Operators);
		}

		public static void RegisterHandlers(ProviderOperators operators) {
<# foreach(string className in generatedClasses) { #>
			<#=className#>.RegisterHandlers(operators);
<# } #>
		}
	}
}
