<#+
public void GenerateOperatorHandlerRegistration(string operatorGroup, string fullName, string symbol, Type operand1Type, Type operand2Type, Type resultType) {
	string operand1TypeName = ToCSharpName(operand1Type);
	string operand2TypeName = ToCSharpName(operand2Type);
	string resultTypeName = ToCSharpName(resultType);
#>
	operators.<#=operatorGroup#>.<#=fullName#>.SetHandler((<#=operand1TypeName#> operand1, <#=operand2TypeName#> operand2) => (<#=resultTypeName#>)(operand1 <#=symbol#> operand2));
<#+
}
#>

<#+
public void GenerateOperatorHandlerRegistration(string operatorGroup, string fullName, string symbol, Type operandType, Type resultType) {
	string operandTypeName = ToCSharpName(operandType);
	string resultTypeName = ToCSharpName(resultType);
#>
	operators.<#=operatorGroup#>.<#=fullName#>.SetHandler((<#=operandTypeName#> operand) => (<#=resultTypeName#>)(<#=symbol#>operand));
<#+
}
#>

<#+
public List<string> GenerateOperatorImplementation(string operatorGroup, string fullName, string symbol, Type operand1Type, Type operand2Type, Type resultType) {
	string operand1TypeName = ToCSharpName(operand1Type);
	string operand2TypeName = ToCSharpName(operand2Type);
	string resultTypeName = ToCSharpName(resultType);

	var generatedClasses = new List<string>();
	//_registrations.Add(string.Format("operators.{0}.{1}.SetHandler(({3} operand1, {4} operand2) => operand1 {2} operand2);"), operatorGroup, fullName, symbol, operand1TypeName, operand2TypeName);
	//_registrations.Add(string.Format("operators.{0}.{1}.SetProviderFactory((Provider<{3}> operands1, Provider<{4}> operands2) => new Operator_{1}_{3}Provider_{4}Provider_{5}Provider(operands1, operands2));"), operatorGroup, fullName, symbol, operand1TypeName, operand2TypeName, resultTypeName);
	//_registrations.Add(string.Format("operators.{0}.{1}.SetProviderFactory((Provider<{3}> operands1, {4} operand2) => new Operator_{1}_{3}Provider_{4}_{5}Provider(operands1, operand2));"), operatorGroup, fullName, symbol, operand1TypeName, operand2TypeName, resultTypeName);
	//_registrations.Add(string.Format("operators.{0}.{1}.SetProviderFactory(({3} operand1, Provider<{4}> operands2) => new Operator_{1}_{3}_{4}Provider_{5}Provider(operand1, operands2));"), operatorGroup, fullName, symbol, operand1TypeName, operand2TypeName, resultTypeName);
#>
//	static class OperatorRegistrator_<#=fullName#>_<#=operand1TypeName#>_<#=operand2TypeName#>_<#=resultTypeName#> : Provider<<#=resultTypeName#>> {
//		public partial void RegisterHandlers(ProviderOperators operators) {
//			operators.<#=operatorGroup#>.<#=fullName#>.SetHandler((<#=operand1TypeName#> operand1, <#=operand2TypeName#> operand2) => operand1 <#=symbol#> operand2);
//			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operand1TypeName#>> operands1, Provider<<#=operand2TypeName#>> operands2) => new Operator_<#=fullName#>_<#=operand1TypeName#>Provider_<#=operand2TypeName#>Provider_<#=resultTypeName#>Provider(operands1, operands2));
//			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operand1TypeName#>> operands1, <#=operand2TypeName#> operand2) => new Operator_<#=fullName#>_<#=operand1TypeName#>Provider_<#=operand2TypeName#>_<#=resultTypeName#>Provider(operands1, operand2));
//			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((<#=operand2TypeName#> operand1, Provider<<#=operand2TypeName#>> operands2) => new Operator_<#=fullName#>_<#=operand1TypeName#>_<#=operand2TypeName#>Provider_<#=resultTypeName#>Provider(operand1, operands2));
//		}
//	}

<#+
	string classNameFull = string.Format("Operator_{0}_{1}Provider_{2}Provider_{3}Provider", fullName, operand1TypeName, operand2TypeName, resultTypeName);
	generatedClasses.Add(classNameFull);
#>

	class <#=classNameFull#> : Provider<<#=resultTypeName#>> {
		Provider<<#=operand1TypeName#>> _operands1;
		Provider<<#=operand2TypeName#>> _operands2;

		public <#=classNameFull#>(Provider<<#=operand1TypeName#>> operands1, Provider<<#=operand2TypeName#>> operands2) {
			_operands1 = operands1;
			_operands2 = operands2;
		}

		public static void RegisterHandlers(ProviderOperators operators) {
			operators.<#=operatorGroup#>.<#=fullName#>.SetHandler((<#=operand1TypeName#> operand1, <#=operand2TypeName#> operand2) => (<#=resultTypeName#>)(operand1 <#=symbol#> operand2));
			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operand1TypeName#>> operands1, Provider<<#=operand2TypeName#>> operands2) => (Provider<<#=resultTypeName#>>)new <#=classNameFull#>(operands1, operands2));
		}

		public override <#=resultTypeName#> GetValue() {
			return (<#=resultTypeName#>)(_operands1.GetValue() <#=symbol#> _operands2.GetValue());
		}
	}

<#+
	string classNameConst2 = string.Format("Operator_{0}_{1}Provider_{2}_{3}Provider", fullName, operand1TypeName, operand2TypeName, resultTypeName);
	generatedClasses.Add(classNameConst2);
#>

	class <#=classNameConst2#> : Provider<<#=resultTypeName#>> {
		Provider<<#=operand1TypeName#>> _operands1;
		<#=operand2TypeName#> _operand2;

		public <#=classNameConst2#>(Provider<<#=operand1TypeName#>> operands1, <#=operand2TypeName#> operand2) {
			_operands1 = operands1;
			_operand2 = operand2;
		}

		public static void RegisterHandlers(ProviderOperators operators) {
			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operand1TypeName#>> operands1, <#=operand2TypeName#> operand2) => new <#=classNameConst2#>(operands1, operand2));
		}

		public override <#=resultTypeName#> GetValue() {
			return (<#=resultTypeName#>)(_operands1.GetValue() <#=symbol#> _operand2);
		}
	}

<#+
	string classNameConst1 = string.Format("Operator_{0}_{1}_{2}Provider_{3}Provider", fullName, operand1TypeName, operand2TypeName, resultTypeName);
	generatedClasses.Add(classNameConst1);
#>

	class <#=classNameConst1#> : Provider<<#=resultTypeName#>> {
		<#=operand1TypeName#> _operand1;
		Provider<<#=operand2TypeName#>> _operands2;

		public <#=classNameConst1#>(<#=operand1TypeName#> operand1, Provider<<#=operand2TypeName#>> operands2) {
			_operand1 = operand1;
			_operands2 = operands2;
		}

		public static void RegisterHandlers(ProviderOperators operators) {
			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((<#=operand1TypeName#> operand1, Provider<<#=operand2TypeName#>> operands2) => new <#=classNameConst1#>(operand1, operands2));
		}

		public override <#=resultTypeName#> GetValue() {
			return (<#=resultTypeName#>)(_operand1 <#=symbol#> _operands2.GetValue());
		}
	}
<#+	return generatedClasses; #>
<#+ } #>

<#+
public List<string> GenerateOperatorImplementation(string operatorGroup, string fullName, string symbol, Type operandType, Type resultType) {
	string operandTypeName = ToCSharpName(operandType);
	string resultTypeName = ToCSharpName(resultType);

	var generatedClasses = new List<string>();
	string classNameFull = string.Format("Operator_{0}_{1}Provider_{2}Provider", fullName, operandTypeName, resultTypeName);
	string registratorClassName = string.Format("OperatorRegistrator_{0}_{1}_{2}", fullName, operandTypeName, resultTypeName);
#>
<#+	if(false && (fullName == "Increment" || fullName == "Decrement")) { #>
<#+		generatedClasses.Add(registratorClassName); #>

	static class <#=registratorClassName#> {
		public static void RegisterHandlers(ProviderOperators operators) {
			operators.<#=operatorGroup#>.<#=fullName#>.SetHandler((<#=operandTypeName#> operand) => (<#=resultTypeName#>)(<#=symbol#>operand));

			<#+ if(fullName == "Increment") { #>

			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operandTypeName#>> operands) => new Operator_Addition_<#=operandTypeName#>Provider_<#=operandTypeName#>Provider_<#=resultTypeName#>Provider(operands, (<#=operandTypeName#>)1));
			<#+ } else if(fullName == "Decrement") { #>
		
			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operandTypeName#>> operands) => new Operator_Subtraction_<#=operandTypeName#>Provider_<#=operandTypeName#>Provider_<#=resultTypeName#>Provider(operands, (<#=operandTypeName#>)1));
			<#+ } else { #>

			//operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operandTypeName#>> operands) => new <#=classNameFull#>(operands));
			<#+ } #>
		}
	}
<#+	} else { #>
<#+		generatedClasses.Add(classNameFull); #>

	class <#=classNameFull#> : Provider<<#=resultTypeName#>> {
		Provider<<#=operandTypeName#>> _operands;

		public <#=classNameFull#>(Provider<<#=operandTypeName#>> operands) {
			_operands = operands;
		}

		public static void RegisterHandlers(ProviderOperators operators) {
			operators.<#=operatorGroup#>.<#=fullName#>.SetHandler((<#=operandTypeName#> operand) => (<#=resultTypeName#>)(<#=symbol#>operand));
			operators.<#=operatorGroup#>.<#=fullName#>.SetProviderFactory((Provider<<#=operandTypeName#>> operands) => new <#=classNameFull#>(operands));
		}

		public override <#=resultTypeName#> GetValue() {
			var value = (<#=resultTypeName#>)_operands.GetValue();
			return (<#=resultTypeName#>)(<#=symbol#>value);
		}
	}
<#+ } #>
<#+	return generatedClasses; #>
<#+ } #>